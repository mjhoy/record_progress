<?php

/**
 * == Form handlers
 */

/**
 * Implements hook_form_alter()
 *
 * Here, hide the title field.
 * It will be assigned a value later, on form submission.
 *
 * Also tweak labels, for intelligibility.
 */
function tracking_data_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'tracking_data_node_form') {
    $form['title']['#type'] = 'hidden';

    // Title field must have something in it to submit, but it will
    // be changed after submission.
    $form['title']['#value'] = 'title';
    $form['#submit'][] = '_tracking_data_form_submit';
    $form['#validate'][] = '_tracking_data_form_validate';

    // Change the title of the taxonomy field
    foreach ($form['taxonomy'] as $key => &$value) {
      if (is_numeric($key)) {
        $value['#title'] = t('Type');
      }
    }
  }
}

/**
 * Called on form submission. Set the title to a generated value.
 */
function _tracking_data_form_submit($form, &$form_state) {
  global $user;
  $username = $user->name;

  $date = $form_state['values']['field_data_date'][0]['value'];
  $date_string = strftime('%d %b %Y', $date);

  $form_state['values']['title'] = $username . ": data for " . $date_string;
}

/**
 * Form validation
 * The custom validation we do is to check and make sure that
 * the taxonomy terms selected are *child* terms -- i.e., they
 * have parent terms defined. This is because a separate
 * dataset is generated for each parent term (there are only
 * meant to be two levels of taxonomy terms). 
 *
 * Here's a silly example. Let's say you wanted to keep track
 * of how much code/documentation/tests you wrote (in lines)
 * in one graph, and how many calories throughout the day you
 * consumed in another graph. You might structure your terms
 * like:
 *
 * - Coding
 *   `- Lines of code
 *    - Lines of documentation
 *    - Lines of test
 * - Diet (calories)
 *   `- Breakfast
 *    - Lunch
 *    - Dinner
 *
 * We want to make sure the user checks "Breakfast", and not
 * "Diet"; and "Lines of code", and not "Coding".
 */
function _tracking_data_form_validate($form, &$form_state) {
  foreach($form_state['values']['taxonomy'] as $key => $value) {
    $tid = $value;
  }
  if ($tid) {
    $q = db_query("SELECT parent FROM {term_hierarchy} WHERE tid=%d", $tid);
    $r = db_fetch_object($q);

    // If the term has a parent value of 0 in the `term_hierarchy` table,
    // it's a 'top-level' term and is not allowed.
    if ($r->parent == 0) {
      form_set_error('taxonomy', t('Please specify a data type.'));
    }
  }
}

/**
 * == User page handlers
 */

/**
 * Implements hook_user().
 *
 * On the user page, we add a section for each data group the user has
 * entered. These sections will be filled in with graphs by the
 * javascript that's loaded.
 */

function tracking_data_user($op, &$edit, &$account, $category = NULL) {
  if ($op === 'view') {
    
    $load_protovis = false; // assume no graph

    // For each dataset (represented by a 'top-level' taxonomy term)
    // create a new section in the user page for the graph to live in.
    $q = db_query("SELECT td.name, parent_td.name AS parent_name FROM {content_type_tracking_data} cttd
      INNER JOIN {node} n ON cttd.vid = n.vid
      INNER JOIN {term_node} tn ON tn.vid = n.vid
      INNER JOIN {term_data} td ON td.tid = tn.tid
      INNER JOIN {term_hierarchy} th ON th.tid = td.tid
      INNER JOIN {term_data} parent_td ON parent_td.tid = th.parent
      WHERE n.uid=%d", $account->uid);

    while ($r = db_fetch_array($q)) {

      $graph_name = $r['parent_name'];
      $load_protovis = true;

      // Set up the overall category if not set up
      if (!isset($account->content['tracking_data'])) {
        $account->content['tracking_data'] = array(
          '#type' => 'user_profile_category',
          '#title' => 'Tracking data',
          '#weight' => 9
        );
      }

      // The graph item setup
      if (!isset($account->content['tracking_data'][$graph_name])) {
        $account->content['tracking_data'][$graph_name] = array(
          '#type' => 'user_profile_item',
          '#title' => $graph_name,
          '#attributes' => array(
            'class' => 'tracking-data-graph-container',
            'data-graph' => $graph_name,
          ),
          '#value' => '<p>You need JavaScript enabled to view this data graph.</p>',
        );
      }
    }

    if ($load_protovis) {

      // Set 'json_url' as a setting for the JavaScript to use.
      $opts = array('absolute' => TRUE);
      $json_url = url('user/' . $account->uid . '/tracking_data.json', $opts);
      drupal_add_js(array('tracking_data' =>
        array("json_url" => $json_url)), 'setting');

      // Add our module, Underscore, and Protovis JS.
      // TODO: Use the 'Libraries' module for js libs?
      drupal_add_js(drupal_get_path('module', 'tracking_data') . '/protovis-r3.2.js');
      drupal_add_js(drupal_get_path('module', 'tracking_data') . '/underscore.js');
      drupal_add_js(drupal_get_path('module', 'tracking_data') . '/user-graph.js');
    }
  }
}


/**
 * == User data handlers
 */

/**
 * Implements hook_menu().
 * 
 * Define the URIs that will supply user data.
 */
function tracking_data_menu() {
  $items['user/%/tracking_data.json'] = array(
    'title' => 'Tracking data JSON',
    'page callback' => 'tracking_data_json',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * The tracking data JSON page callback.
 */
function tracking_data_json($uid) {
  // Get the VIDs for tracking data.
  // Big ugly query. To be cached.
  $q = db_query("SELECT field_data_date_value, field_data_value_value, td.name, parent_td.name AS parent_name FROM {content_type_tracking_data} cttd
    INNER JOIN {node} n ON cttd.vid = n.vid
    INNER JOIN {term_node} tn ON tn.vid = n.vid
    INNER JOIN {term_data} td ON td.tid = tn.tid
    INNER JOIN {term_hierarchy} th ON th.tid = td.tid
    INNER JOIN {term_data} parent_td ON parent_td.tid = th.parent
    WHERE n.uid=%d", $uid);

  $data = array();

  $this_year = mktime(0, 0, 0, 1, 1);

  while ($r = db_fetch_array($q)) {
    $graph = $r['parent_name'];
    $dataset = $r['name'];
    $datestamp = $r['field_data_date_value'];
    $y = $r['field_data_value_value'];

    // Find the number of days from the beginning of this year 
    // (January 1 of whatever year it is). This is the x-value in
    // the user graph.
    $x = round(($datestamp - $this_year) / 86400) + 1;

    // Populate the data associated array.
    $data[$graph][$dataset][] = array(
      'x' => $x,
      'y' => $y,
    );
  }

  drupal_json($data);
}
